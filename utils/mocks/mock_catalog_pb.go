// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/catalog_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./utils/catalog_grpc.pb.go -destination=./utils/mock_catalog_pb.go
//

// Package mock_utils is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	"github.com/jkeam/openshift-agent-install-manifest-generator/utils"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRegistryClient is a mock of RegistryClient interface.
type MockRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryClientMockRecorder
	isgomock struct{}
}

// MockRegistryClientMockRecorder is the mock recorder for MockRegistryClient.
type MockRegistryClientMockRecorder struct {
	mock *MockRegistryClient
}

// NewMockRegistryClient creates a new mock instance.
func NewMockRegistryClient(ctrl *gomock.Controller) *MockRegistryClient {
	mock := &MockRegistryClient{ctrl: ctrl}
	mock.recorder = &MockRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryClient) EXPECT() *MockRegistryClientMockRecorder {
	return m.recorder
}

// GetBundle mocks base method.
func (m *MockRegistryClient) GetBundle(ctx context.Context, in *utils.GetBundleRequest, opts ...grpc.CallOption) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBundle", varargs...)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundle indicates an expected call of GetBundle.
func (mr *MockRegistryClientMockRecorder) GetBundle(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockRegistryClient)(nil).GetBundle), varargs...)
}

// GetBundleForChannel mocks base method.
func (m *MockRegistryClient) GetBundleForChannel(ctx context.Context, in *utils.GetBundleInChannelRequest, opts ...grpc.CallOption) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBundleForChannel", varargs...)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundleForChannel indicates an expected call of GetBundleForChannel.
func (mr *MockRegistryClientMockRecorder) GetBundleForChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundleForChannel", reflect.TypeOf((*MockRegistryClient)(nil).GetBundleForChannel), varargs...)
}

// GetBundleThatReplaces mocks base method.
func (m *MockRegistryClient) GetBundleThatReplaces(ctx context.Context, in *utils.GetReplacementRequest, opts ...grpc.CallOption) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBundleThatReplaces", varargs...)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundleThatReplaces indicates an expected call of GetBundleThatReplaces.
func (mr *MockRegistryClientMockRecorder) GetBundleThatReplaces(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundleThatReplaces", reflect.TypeOf((*MockRegistryClient)(nil).GetBundleThatReplaces), varargs...)
}

// GetChannelEntriesThatProvide mocks base method.
func (m *MockRegistryClient) GetChannelEntriesThatProvide(ctx context.Context, in *utils.GetAllProvidersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[utils.ChannelEntry], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelEntriesThatProvide", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[utils.ChannelEntry])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelEntriesThatProvide indicates an expected call of GetChannelEntriesThatProvide.
func (mr *MockRegistryClientMockRecorder) GetChannelEntriesThatProvide(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelEntriesThatProvide", reflect.TypeOf((*MockRegistryClient)(nil).GetChannelEntriesThatProvide), varargs...)
}

// GetChannelEntriesThatReplace mocks base method.
func (m *MockRegistryClient) GetChannelEntriesThatReplace(ctx context.Context, in *utils.GetAllReplacementsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[utils.ChannelEntry], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannelEntriesThatReplace", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[utils.ChannelEntry])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelEntriesThatReplace indicates an expected call of GetChannelEntriesThatReplace.
func (mr *MockRegistryClientMockRecorder) GetChannelEntriesThatReplace(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelEntriesThatReplace", reflect.TypeOf((*MockRegistryClient)(nil).GetChannelEntriesThatReplace), varargs...)
}

// GetDefaultBundleThatProvides mocks base method.
func (m *MockRegistryClient) GetDefaultBundleThatProvides(ctx context.Context, in *utils.GetDefaultProviderRequest, opts ...grpc.CallOption) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDefaultBundleThatProvides", varargs...)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBundleThatProvides indicates an expected call of GetDefaultBundleThatProvides.
func (mr *MockRegistryClientMockRecorder) GetDefaultBundleThatProvides(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBundleThatProvides", reflect.TypeOf((*MockRegistryClient)(nil).GetDefaultBundleThatProvides), varargs...)
}

// GetLatestChannelEntriesThatProvide mocks base method.
func (m *MockRegistryClient) GetLatestChannelEntriesThatProvide(ctx context.Context, in *utils.GetLatestProvidersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[utils.ChannelEntry], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestChannelEntriesThatProvide", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[utils.ChannelEntry])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestChannelEntriesThatProvide indicates an expected call of GetLatestChannelEntriesThatProvide.
func (mr *MockRegistryClientMockRecorder) GetLatestChannelEntriesThatProvide(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestChannelEntriesThatProvide", reflect.TypeOf((*MockRegistryClient)(nil).GetLatestChannelEntriesThatProvide), varargs...)
}

// GetPackage mocks base method.
func (m *MockRegistryClient) GetPackage(ctx context.Context, in *utils.GetPackageRequest, opts ...grpc.CallOption) (*utils.Package, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPackage", varargs...)
	ret0, _ := ret[0].(*utils.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockRegistryClientMockRecorder) GetPackage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockRegistryClient)(nil).GetPackage), varargs...)
}

// ListBundles mocks base method.
func (m *MockRegistryClient) ListBundles(ctx context.Context, in *utils.ListBundlesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[utils.Bundle], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBundles", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[utils.Bundle])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBundles indicates an expected call of ListBundles.
func (mr *MockRegistryClientMockRecorder) ListBundles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBundles", reflect.TypeOf((*MockRegistryClient)(nil).ListBundles), varargs...)
}

// ListPackages mocks base method.
func (m *MockRegistryClient) ListPackages(ctx context.Context, in *utils.ListPackageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[utils.PackageName], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackages", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[utils.PackageName])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockRegistryClientMockRecorder) ListPackages(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockRegistryClient)(nil).ListPackages), varargs...)
}

// MockRegistryServer is a mock of RegistryServer interface.
type MockRegistryServer struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryServerMockRecorder
	isgomock struct{}
}

// MockRegistryServerMockRecorder is the mock recorder for MockRegistryServer.
type MockRegistryServerMockRecorder struct {
	mock *MockRegistryServer
}

// NewMockRegistryServer creates a new mock instance.
func NewMockRegistryServer(ctrl *gomock.Controller) *MockRegistryServer {
	mock := &MockRegistryServer{ctrl: ctrl}
	mock.recorder = &MockRegistryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryServer) EXPECT() *MockRegistryServerMockRecorder {
	return m.recorder
}

// GetBundle mocks base method.
func (m *MockRegistryServer) GetBundle(arg0 context.Context, arg1 *utils.GetBundleRequest) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundle", arg0, arg1)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundle indicates an expected call of GetBundle.
func (mr *MockRegistryServerMockRecorder) GetBundle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundle", reflect.TypeOf((*MockRegistryServer)(nil).GetBundle), arg0, arg1)
}

// GetBundleForChannel mocks base method.
func (m *MockRegistryServer) GetBundleForChannel(arg0 context.Context, arg1 *utils.GetBundleInChannelRequest) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundleForChannel", arg0, arg1)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundleForChannel indicates an expected call of GetBundleForChannel.
func (mr *MockRegistryServerMockRecorder) GetBundleForChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundleForChannel", reflect.TypeOf((*MockRegistryServer)(nil).GetBundleForChannel), arg0, arg1)
}

// GetBundleThatReplaces mocks base method.
func (m *MockRegistryServer) GetBundleThatReplaces(arg0 context.Context, arg1 *utils.GetReplacementRequest) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBundleThatReplaces", arg0, arg1)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBundleThatReplaces indicates an expected call of GetBundleThatReplaces.
func (mr *MockRegistryServerMockRecorder) GetBundleThatReplaces(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBundleThatReplaces", reflect.TypeOf((*MockRegistryServer)(nil).GetBundleThatReplaces), arg0, arg1)
}

// GetChannelEntriesThatProvide mocks base method.
func (m *MockRegistryServer) GetChannelEntriesThatProvide(arg0 *utils.GetAllProvidersRequest, arg1 grpc.ServerStreamingServer[utils.ChannelEntry]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelEntriesThatProvide", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChannelEntriesThatProvide indicates an expected call of GetChannelEntriesThatProvide.
func (mr *MockRegistryServerMockRecorder) GetChannelEntriesThatProvide(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelEntriesThatProvide", reflect.TypeOf((*MockRegistryServer)(nil).GetChannelEntriesThatProvide), arg0, arg1)
}

// GetChannelEntriesThatReplace mocks base method.
func (m *MockRegistryServer) GetChannelEntriesThatReplace(arg0 *utils.GetAllReplacementsRequest, arg1 grpc.ServerStreamingServer[utils.ChannelEntry]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelEntriesThatReplace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetChannelEntriesThatReplace indicates an expected call of GetChannelEntriesThatReplace.
func (mr *MockRegistryServerMockRecorder) GetChannelEntriesThatReplace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelEntriesThatReplace", reflect.TypeOf((*MockRegistryServer)(nil).GetChannelEntriesThatReplace), arg0, arg1)
}

// GetDefaultBundleThatProvides mocks base method.
func (m *MockRegistryServer) GetDefaultBundleThatProvides(arg0 context.Context, arg1 *utils.GetDefaultProviderRequest) (*utils.Bundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBundleThatProvides", arg0, arg1)
	ret0, _ := ret[0].(*utils.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBundleThatProvides indicates an expected call of GetDefaultBundleThatProvides.
func (mr *MockRegistryServerMockRecorder) GetDefaultBundleThatProvides(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBundleThatProvides", reflect.TypeOf((*MockRegistryServer)(nil).GetDefaultBundleThatProvides), arg0, arg1)
}

// GetLatestChannelEntriesThatProvide mocks base method.
func (m *MockRegistryServer) GetLatestChannelEntriesThatProvide(arg0 *utils.GetLatestProvidersRequest, arg1 grpc.ServerStreamingServer[utils.ChannelEntry]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestChannelEntriesThatProvide", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLatestChannelEntriesThatProvide indicates an expected call of GetLatestChannelEntriesThatProvide.
func (mr *MockRegistryServerMockRecorder) GetLatestChannelEntriesThatProvide(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestChannelEntriesThatProvide", reflect.TypeOf((*MockRegistryServer)(nil).GetLatestChannelEntriesThatProvide), arg0, arg1)
}

// GetPackage mocks base method.
func (m *MockRegistryServer) GetPackage(arg0 context.Context, arg1 *utils.GetPackageRequest) (*utils.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0, arg1)
	ret0, _ := ret[0].(*utils.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockRegistryServerMockRecorder) GetPackage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockRegistryServer)(nil).GetPackage), arg0, arg1)
}

// ListBundles mocks base method.
func (m *MockRegistryServer) ListBundles(arg0 *utils.ListBundlesRequest, arg1 grpc.ServerStreamingServer[utils.Bundle]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBundles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBundles indicates an expected call of ListBundles.
func (mr *MockRegistryServerMockRecorder) ListBundles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBundles", reflect.TypeOf((*MockRegistryServer)(nil).ListBundles), arg0, arg1)
}

// ListPackages mocks base method.
func (m *MockRegistryServer) ListPackages(arg0 *utils.ListPackageRequest, arg1 grpc.ServerStreamingServer[utils.PackageName]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockRegistryServerMockRecorder) ListPackages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockRegistryServer)(nil).ListPackages), arg0, arg1)
}

// mustEmbedUnimplementedRegistryServer mocks base method.
func (m *MockRegistryServer) mustEmbedUnimplementedRegistryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegistryServer")
}

// mustEmbedUnimplementedRegistryServer indicates an expected call of mustEmbedUnimplementedRegistryServer.
func (mr *MockRegistryServerMockRecorder) mustEmbedUnimplementedRegistryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegistryServer", reflect.TypeOf((*MockRegistryServer)(nil).mustEmbedUnimplementedRegistryServer))
}

// MockUnsafeRegistryServer is a mock of UnsafeRegistryServer interface.
type MockUnsafeRegistryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRegistryServerMockRecorder
	isgomock struct{}
}

// MockUnsafeRegistryServerMockRecorder is the mock recorder for MockUnsafeRegistryServer.
type MockUnsafeRegistryServerMockRecorder struct {
	mock *MockUnsafeRegistryServer
}

// NewMockUnsafeRegistryServer creates a new mock instance.
func NewMockUnsafeRegistryServer(ctrl *gomock.Controller) *MockUnsafeRegistryServer {
	mock := &MockUnsafeRegistryServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRegistryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRegistryServer) EXPECT() *MockUnsafeRegistryServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRegistryServer mocks base method.
func (m *MockUnsafeRegistryServer) mustEmbedUnimplementedRegistryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegistryServer")
}

// mustEmbedUnimplementedRegistryServer indicates an expected call of mustEmbedUnimplementedRegistryServer.
func (mr *MockUnsafeRegistryServerMockRecorder) mustEmbedUnimplementedRegistryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegistryServer", reflect.TypeOf((*MockUnsafeRegistryServer)(nil).mustEmbedUnimplementedRegistryServer))
}
